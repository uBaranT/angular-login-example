/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../services/encoder';

import { Observable }                                        from 'rxjs';

import { JobPosts } from '../model/jobPosts';

import { BASE_PATH } from '../services/variables';
import { Configuration } from '../services/configuration';

@Injectable()
export class JobPostsContollerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * filterJobPosts
     * 
     * @param cityFilter cityFilter
     * @param fieldFilter fieldFilter
     * @param workHoursFilter workHoursFilter
     * @param workTypeFilter workTypeFilter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filterJobPostsUsingGET(cityFilter?: string, fieldFilter?: string, workHoursFilter?: string, workTypeFilter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<JobPosts>>;
    public filterJobPostsUsingGET(cityFilter?: string, fieldFilter?: string, workHoursFilter?: string, workTypeFilter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobPosts>>>;
    public filterJobPostsUsingGET(cityFilter?: string, fieldFilter?: string, workHoursFilter?: string, workTypeFilter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobPosts>>>;
    public filterJobPostsUsingGET(cityFilter?: string, fieldFilter?: string, workHoursFilter?: string, workTypeFilter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cityFilter !== undefined && cityFilter !== null) {
            queryParameters = queryParameters.set('cityFilter', <any>cityFilter);
        }
        if (fieldFilter !== undefined && fieldFilter !== null) {
            queryParameters = queryParameters.set('fieldFilter', <any>fieldFilter);
        }
        if (workHoursFilter !== undefined && workHoursFilter !== null) {
            queryParameters = queryParameters.set('workHoursFilter', <any>workHoursFilter);
        }
        if (workTypeFilter !== undefined && workTypeFilter !== null) {
            queryParameters = queryParameters.set('workTypeFilter', <any>workTypeFilter);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<JobPosts>>(`${this.basePath}/jobposts/filter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAll
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<JobPosts>>;
    public getAllUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobPosts>>>;
    public getAllUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobPosts>>>;
    public getAllUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<JobPosts>>(`${this.basePath}/jobposts`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDescription
     * 
     * @param postId post_id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDescriptionUsingGET(postId: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getDescriptionUsingGET(postId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getDescriptionUsingGET(postId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getDescriptionUsingGET(postId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (postId === null || postId === undefined) {
            throw new Error('Required parameter postId was null or undefined when calling getDescriptionUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get<string>(`${this.basePath}/jobposts/getDescription`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchJobPosts
     * 
     * @param filter filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchJobPostsUsingGET(filter?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<JobPosts>>;
    public searchJobPostsUsingGET(filter?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobPosts>>>;
    public searchJobPostsUsingGET(filter?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobPosts>>>;
    public searchJobPostsUsingGET(filter?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', <any>filter);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<JobPosts>>(`${this.basePath}/jobposts/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
