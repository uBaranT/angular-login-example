/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../services/encoder';
import { Observable }                                        from 'rxjs';

import { JobPosts } from '../model/jobPosts';
import { User } from '../model/user';
import { UserAddFavoriteRequests } from '../model/userAddFavoriteRequests';
import { UserApplyApplicationRequests } from '../model/userApplyApplicationRequests';
import { UserGetPostRequests } from '../model/userGetPostRequests';
import { UserLoginRequests } from '../model/userLoginRequests';
import { UserRegisterRequests } from '../model/userRegisterRequests';
import { UserResponse } from '../model/userResponse';
import { UserResumeSaveRequests } from '../model/userResumeSaveRequests';

import { BASE_PATH } from '../services/variables';
import { Configuration } from '../services/configuration';

@Injectable()
export class UserControllerService {

    protected basePath = 'https://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addFavorites
     * 
     * @param email email
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFavoritesUsingPOST(email: string, request: UserAddFavoriteRequests, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;
    public addFavoritesUsingPOST(email: string, request: UserAddFavoriteRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;
    public addFavoritesUsingPOST(email: string, request: UserAddFavoriteRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;
    public addFavoritesUsingPOST(email: string, request: UserAddFavoriteRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling addFavoritesUsingPOST.');
        }

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling addFavoritesUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserResponse>(`${this.basePath}/user/addFavorites`,
            request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * applyJob
     * 
     * @param email email
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public applyJobUsingPOST(email: string, request: UserApplyApplicationRequests, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;
    public applyJobUsingPOST(email: string, request: UserApplyApplicationRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;
    public applyJobUsingPOST(email: string, request: UserApplyApplicationRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;
    public applyJobUsingPOST(email: string, request: UserApplyApplicationRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling applyJobUsingPOST.');
        }

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling applyJobUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserResponse>(`${this.basePath}/user/applyJob`,
            request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAll
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllUsingGET1(observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getAllUsingGET1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getAllUsingGET1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getAllUsingGET1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/user`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getFavorites
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFavoritesUsingPOST(request: UserGetPostRequests, observe?: 'body', reportProgress?: boolean): Observable<Array<JobPosts>>;
    public getFavoritesUsingPOST(request: UserGetPostRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobPosts>>>;
    public getFavoritesUsingPOST(request: UserGetPostRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobPosts>>>;
    public getFavoritesUsingPOST(request: UserGetPostRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getFavoritesUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<JobPosts>>(`${this.basePath}/user/getFavorites`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPreviousApplications
     * 
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPreviousApplicationsUsingPOST(request: UserGetPostRequests, observe?: 'body', reportProgress?: boolean): Observable<Array<JobPosts>>;
    public getPreviousApplicationsUsingPOST(request: UserGetPostRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<JobPosts>>>;
    public getPreviousApplicationsUsingPOST(request: UserGetPostRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<JobPosts>>>;
    public getPreviousApplicationsUsingPOST(request: UserGetPostRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling getPreviousApplicationsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Array<JobPosts>>(`${this.basePath}/user/getPreviousApplications`,
            request,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getResume
     * 
     * @param email email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResumeUsingPOST(email: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getResumeUsingPOST(email: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getResumeUsingPOST(email: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getResumeUsingPOST(email: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling getResumeUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/user/getResume`,
            email,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * login
     * 
     * @param user user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginUsingPOST(user: UserLoginRequests, observe?: 'body', reportProgress?: boolean): Observable<UserResponse>;
    public loginUsingPOST(user: UserLoginRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserResponse>>;
    public loginUsingPOST(user: UserLoginRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserResponse>>;
    public loginUsingPOST(user: UserLoginRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling loginUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserResponse>(`${this.basePath}/user/login`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * register
     * 
     * @param user user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerUsingPOST(user: UserRegisterRequests, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public registerUsingPOST(user: UserRegisterRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public registerUsingPOST(user: UserRegisterRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public registerUsingPOST(user: UserRegisterRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling registerUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/user/register`,
            user,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateResume
     * 
     * @param email email
     * @param request request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateResumeUsingPOST(email: string, request: UserResumeSaveRequests, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public updateResumeUsingPOST(email: string, request: UserResumeSaveRequests, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public updateResumeUsingPOST(email: string, request: UserResumeSaveRequests, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public updateResumeUsingPOST(email: string, request: UserResumeSaveRequests, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling updateResumeUsingPOST.');
        }

        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling updateResumeUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<string>(`${this.basePath}/user/update`,
            request,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
